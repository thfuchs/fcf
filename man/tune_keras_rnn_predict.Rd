% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tune_keras_rnn_predict.R
\name{tune_keras_rnn_predict}
\alias{tune_keras_rnn_predict}
\title{Automatic cross-validated training and prediction process for recurrent
neural networks for time series data}
\usage{
tune_keras_rnn_predict(
  data,
  model_type,
  cv_setting,
  bayes_best_par,
  col_id = NULL,
  col_date = "index",
  col_value = "value",
  level = 95,
  iter = 10,
  iter_dropout = 1000,
  save_model = NULL,
  save_model_id = NULL
)
}
\arguments{
\item{data}{Univariate time series (data.frame) with date and value column,
specified in \code{col_date} and \code{col_value}}

\item{model_type}{One of "simple", "gru" or "lstm"}

\item{cv_setting}{list of "periods_train", "periods_val", "periods_test" and
"skip_span" for \link[rsample]{rolling_origin}}

\item{bayes_best_par}{tuned hyperparameters, from \code{tune_keras_rnn_bayesoptim()}}

\item{col_id}{Optional ID column in \code{data}, default to "ticker"}

\item{col_date}{Date column in \code{data}, default to "index"}

\item{col_value}{Value column in \code{data}, default to "value"}

\item{level}{level for prediction interval in percentage}

\item{iter}{number of neural networks to train per split with same
hyperparameters}

\item{iter_dropout}{number of iterations for prediction intervals calculated
by monte carlo dropout}

\item{save_model}{Automatically save tuned models? Specify NULL for No or
character vector with path to directory for yes}

\item{save_model_id}{optional id for model filename}
}
\value{
list of forecasts per split
}
\description{
Use tuned RNN parameters with Keras functional API to train best performing
model(s) and generate forecasts
}
\examples{
\dontrun{
apple <- tsRNN::DT_apple

bayes_best_par <- purrr::map(
  readRDS(system.file("tinytest_data/apple_bayesoptim.rds", package = "tsRNN")),
  "Best_Par"
)
cv_setting <- list(
  periods_train = 90,
  periods_val = 10,
  periods_test = 10,
  skip_span = 5
)

result <- tune_keras_rnn_predict(
  data = apple,
  model_type = "simple",
  cv_setting = cv_setting,
  bayes_best_par = bayes_best_par
)
result
}
}
\seealso{
Other RNN tuning with Keras: 
\code{\link{tune_keras_rnn_bayesoptim}()},
\code{\link{tune_keras_rnn_eval}()}
}
\concept{RNN tuning with Keras}
